#ifndef INC_ARBRE_DE_HUFFMAN_H_
#define INC_ARBRE_DE_HUFFMAN_H_

//////////////////////////////////////////////////////////////////////////////////
/////////////////////////INCLUDE//////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
#include "stm32f4xx_hal.h"

//////////////////////////////////////////////////////////////////////////////////
/////////////////////////DEFINE///////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
#define TAILLE_MAX_COMPRESS 	500

//////////////////////////////////////////////////////////////////////////////////
/////////////////////////STRUCTURE////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
struct Noeud{
	uint8_t c; // Caractère initial
	uint32_t occurence; // Nombre d'occurences
	uint32_t code; // Code binaire dans l'arbre
	uint32_t tailleCode; // NOmbre de bits du code
	struct Noeud *gauche, *droite; // Lien vers les noeuds suivants
};

//////////////////////////////////////////////////////////////////////////////////
/////////////////////////VARIABLE GLOBALE/////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//txt non compressé
extern uint8_t texte[];

//txt compressé
extern uint8_t texteCompress[TAILLE_MAX_COMPRESS];

//tab du nombre d'occurences de chaque caractère
extern uint32_t tabCaractere[256];

//nb de caractères total dans le txt non compressé
extern uint32_t nbrCaractereTotal;

//nb de caracteres différents dans le txt non compressé
extern uint32_t nbrCaractereDifferent;

//arbre de Huffman
extern struct Noeud* arbreHuffman[256];

//Racine de l'arbre
extern struct Noeud* racine;


//////////////////////////////////////////////////////////////////////////////////
/////////////////////////DEFINE///////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
#define TAILLE_MAX_COMPRESS 500



//////////////////////////////////////////////////////////////////////////////////
/////////////////////////FONCTION/////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void arbre_de_Huffman(void);
uint8_t creerFeuille(struct Noeud* arbre[256], uint32_t texte[256]);

void occurence(uint8_t* texte, uint32_t tabCaractere[256]);
void afficheArbre(struct Noeud *arbre[256],uint32_t taille);
void tri_de_Arbre(struct Noeud* arbre[256],uint8_t taille);
void cree_racine(struct Noeud* arbre[256], uint32_t taille,struct Noeud* racine);
void parcourirArbre(struct Noeud* ptrNoeud);
void creerCode(struct Noeud* ptrNoeud,uint32_t code, uint32_t taille);
struct Noeud* getAdress(struct Noeud* ptrNoeud, uint8_t caractere);
struct Entete* creeentete(uint8_t *texte, uint8_t texteCompress[TAILLE_MAX_COMPRESS]);
void compression(uint8_t texteCompress[TAILLE_MAX_COMPRESS],struct Noeud* racine,uint8_t texte[taille]);


#endif /* INC_ARBRE_DE_HUFFMAN_H_ */
